{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcda RiderX Project Documentation","text":"<p>Welcome to the official documentation for the RiderX backend project.</p>"},{"location":"#sections","title":"Sections","text":"<ol> <li>Executive Summary</li> <li>System Architecture</li> <li>Tech Stack</li> <li>Feature List</li> <li>Data Model</li> <li>Security &amp; Compliance</li> <li>DevOps &amp; Deployment</li> <li>Third-party Integrations</li> <li>Testing Strategy</li> <li>Monitoring &amp; Observability</li> <li>Development Roadmap</li> <li>GitHub Standards</li> <li>API Documentation</li> <li>Investor Summary</li> </ol>"},{"location":"01-executive-summary/","title":"\ud83d\ude80 Executive Summary","text":"<p>Project Name: RiderX (Working Title) Developer: Aman Lalpuria Repository: rider-backend</p>"},{"location":"01-executive-summary/#product-vision","title":"\ud83c\udf0d Product Vision","text":"<p>RiderX is a unified, scalable ridesharing platform that offers: - \ud83d\ude97 Car rides - \ud83d\ude97 Auto Ride - \ud83d\udef5 Bike rides - \ud83e\udd1d Carpooling</p> <p>All in one seamless, real-time mobile app for urban commuters.</p>"},{"location":"01-executive-summary/#target-audience","title":"\ud83c\udfaf Target Audience","text":"<ul> <li>Urban commuters in metro cities</li> <li>College and university students</li> <li>Office-goers and working professionals</li> <li>Eco-conscious citizens looking for carpool options</li> </ul>"},{"location":"01-executive-summary/#unique-selling-points-usp","title":"\ud83e\udde0 Unique Selling Points (USP)","text":"<ul> <li>One-stop app for all ride types</li> <li>AI-powered ride matching and smart pricing</li> <li>Eco-friendly &amp; budget-friendly ride pooling</li> <li>Gamified loyalty &amp; referral program</li> <li>Fast onboarding for riders &amp; drivers</li> </ul>"},{"location":"01-executive-summary/#monetization-strategy","title":"\ud83d\udcb8 Monetization Strategy","text":"<ul> <li>15\u201325% commission per ride</li> <li>Dynamic surge pricing during peak hours</li> <li>Subscription plans for heavy users</li> <li>Location-based ad partnerships</li> <li>Vehicle loan and leasing partnerships</li> </ul>"},{"location":"01-executive-summary/#business-goals-year-1","title":"\ud83d\udcc8 Business Goals (Year 1)","text":"<ul> <li>Launch MVP in 1 metro city</li> <li>Acquire 10,000+ active users</li> <li>Partner with 2,000+ drivers</li> <li>Achieve 50,000 completed rides</li> <li>Raise pre-seed or seed round funding</li> </ul>"},{"location":"01-executive-summary/#team-strategy","title":"\ud83d\udc65 Team Strategy","text":"<ul> <li>Backend: Java Spring Boot, Microservices</li> <li>Mobile: React Native cross-platform</li> <li>DevOps: AWS with Docker + Kubernetes</li> <li>Design: Scalable, modular UI with UX-first focus</li> </ul>"},{"location":"02-system-architecture/","title":"\ud83c\udfd7\ufe0f System Architecture","text":""},{"location":"02-system-architecture/#overview","title":"Overview","text":"<p>RiderX is a scalable, modular, service-oriented architecture that supports multiple ride types (car, bike, carpool) and real-time operations across mobile and backend infrastructure.</p>"},{"location":"02-system-architecture/#high-level-architecture","title":"\ud83c\udf10 High-Level Architecture","text":"<p> - Monolith Backend using Spring Boot - PostgreSQL for relational data and full-text search (<code>tsvector</code>) - Redis for caching sessions, OTP throttling - React Native App for cross-platform mobile UI - Firebase FCM for push notifications - Twilio for OTP delivery - AWS SES for transactional emails - S3 for media storage - AWS EC2 for hosting (Docker-based) - RabbitMQ / AWS SQS for async job queueing - OpenTelemetry + Prometheus + Grafana / Datadog for observability - Payment Gateway: Razorpay / Stripe (TBD) - Security: AWS Security Groups, firewalls, AES encryption for sensitive data</p>"},{"location":"02-system-architecture/#tech-stack","title":"\ud83e\uddf1 Tech Stack","text":"Layer Technology Backend Spring Boot (Java) Mobile React Native (TypeScript) Database PostgreSQL + <code>tsvector</code> Cache Redis Message Queue RabbitMQ / AWS SQS Notifications Firebase FCM Email AWS SES SMS OTP Twilio Maps Google Maps API Object Storage AWS S3 Observability OpenTelemetry + Prometheus Monitoring (Opt.) Grafana / Datadog CI/CD GitHub Actions + Terraform + GHCR Hosting Dockerized app on AWS EC2"},{"location":"02-system-architecture/#cost-breakdown-monthly-estimate-in-inr","title":"\ud83d\udcb0 Cost Breakdown (Monthly Estimate in INR)","text":"Service Estimated Cost (INR) Notes AWS EC2 (t3.small) \u20b9 2,000 \u2013 \u20b9 2,500 Hosting monolith backend PostgreSQL (RDS) \u20b9 3,000 \u2013 \u20b9 4,000 Managed DB or self-hosted Redis (Elasticache) \u20b9 1,000 \u2013 \u20b9 1,500 Or self-hosted Twilio (OTP) \u20b9 0.40 per SMS Prepaid / postpaid Firebase FCM Free Tier AWS SES \u20b9 0.10 per 1,000 mails First 62K/month free Google Maps API \u20b9 200\u20131,000 Based on usage S3 Storage \u20b9 1\u20133/GB Based on storage volume Datadog (Optional) \u20b9 1,500+ Free tier available GitHub Actions Free Tier / \u20b9\u20b9 Based on minutes used Terraform Free CLI Using OSS Domain Name &amp; SSL \u20b9 800/year Optional: Namecheap, Route53 <p>Total Monthly Budget: ~ \u20b910,000 \u2013 \u20b915,000 for early-stage ops</p> <p>See spreadsheet for detailed calculations.</p>"},{"location":"02-system-architecture/#deployment-pipeline","title":"\ud83d\ude80 Deployment Pipeline","text":"<p>```mermaid graph TD   A[GitHub Push] --&gt; B[GitHub Actions CI]   B --&gt; C[Build Docker Image]   C --&gt; D[Push to GitHub Container Registry]   D --&gt; E[Terraform Provisioning (EC2, S3, etc.)]   E --&gt; F[SSH to EC2 &amp; Deploy Docker Compose] ````</p>"},{"location":"02-system-architecture/#monitoring-observability","title":"\ud83d\udcca Monitoring &amp; Observability","text":"<ul> <li>OpenTelemetry for distributed tracing</li> <li>Prometheus for metrics collection</li> <li>Grafana for dashboarding</li> <li>Optional: Datadog if you want a SaaS solution (easy but costly)</li> </ul>"},{"location":"02-system-architecture/#security","title":"\ud83d\udd12 Security","text":"<ul> <li>Use AES-256 to encrypt sensitive data like user credentials and tokens</li> <li>Configure AWS Security Groups for basic firewall</li> <li>Use HTTPS (Let\u2019s Encrypt or ACM)</li> <li>Role-based access control in backend</li> <li>Input validation &amp; sanitation (backend + frontend)</li> </ul>"},{"location":"02-system-architecture/#scaling-recommendations-future","title":"\ud83d\udcc8 Scaling Recommendations (Future)","text":"<ul> <li> <p>Move to microservices when:</p> <ul> <li>Traffic becomes hard to manage in a monolith</li> <li>Teams work on different domains (e.g., payment, driver, rides)</li> <li>Use EKS/Fargate if you need container orchestration</li> <li>Integrate CDN and WebSockets for real-time ride updates</li> <li>Use Elasticsearch for geo queries + text search</li> <li>Expand to multi-region with RDS/Aurora Global</li> </ul> </li> </ul>"},{"location":"02-system-architecture/#er-diagram-data-design","title":"\ud83d\udcc4 ER Diagram &amp; Data Design","text":"<p>To be added: </p>"},{"location":"02-system-architecture/#testing","title":"\ud83e\uddea Testing","text":"<ul> <li>Postman or Thunder Client for manual API testing</li> <li>JUnit for backend unit testing</li> <li>Detox for mobile E2E (React Native)</li> <li>GitHub Actions CI can run tests on each PR</li> </ul>"},{"location":"02-system-architecture/#useful-links","title":"\ud83d\udcce Useful Links","text":"<ul> <li>Twilio OTP Setup</li> <li>AWS SES Setup</li> <li>Firebase FCM Guide</li> <li>OpenTelemetry for Java</li> </ul>"},{"location":"03-tech-stack/","title":"\ud83e\uddf0 Tech Stack","text":""},{"location":"03-tech-stack/#frontend-mobile","title":"Frontend (Mobile)","text":"<ul> <li>Framework: React Native (Expo for MVP)</li> <li>Navigation: React Navigation</li> <li>State Mgmt: Redux Toolkit</li> <li>Maps &amp; Location: Google Maps SDK, Geolocation API</li> <li>Notifications: Firebase Cloud Messaging</li> </ul>"},{"location":"03-tech-stack/#backend","title":"Backend","text":"<ul> <li>Language: Java 21</li> <li>Framework: Spring Boot 3</li> <li>Architecture: Microservices (REST + Async)</li> <li>API Gateway: Spring Cloud Gateway / NGINX</li> <li>Auth: OAuth2 + JWT</li> <li>Validation: Bean Validation (Jakarta), ExceptionHandlers</li> </ul>"},{"location":"03-tech-stack/#database","title":"Database","text":"<ul> <li>Main RDBMS: PostgreSQL</li> <li>Caching: Redis</li> <li>Analytics/Logs (optional): MongoDB, Elasticsearch</li> </ul>"},{"location":"03-tech-stack/#messaging","title":"Messaging","text":"<ul> <li>Broker: RabbitMQ / Kafka (for events, real-time ops)</li> </ul>"},{"location":"03-tech-stack/#devops-infra","title":"DevOps &amp; Infra","text":"<ul> <li>Containerization: Docker</li> <li>Orchestration: Kubernetes (EKS) or Docker Compose</li> <li>CI/CD: GitHub Actions</li> <li>Infra-as-Code: Terraform / Pulumi (optional)</li> <li>Monitoring: Prometheus + Grafana, AWS CloudWatch</li> </ul>"},{"location":"03-tech-stack/#storage-uploads","title":"Storage &amp; Uploads","text":"<ul> <li>Cloud Storage: AWS S3 (for images, documents)</li> <li>CDN (optional): CloudFront</li> </ul>"},{"location":"03-tech-stack/#third-party-apis","title":"Third-Party APIs","text":"<ul> <li>Maps &amp; Routing: Google Maps / OpenStreetMap</li> <li>Payments: Razorpay / Stripe / Cashfree</li> <li>SMS/OTP: Twilio / Msg91</li> <li>Push Notifications: Firebase</li> </ul>"},{"location":"04-feature-list/","title":"\ud83d\udccb Feature List","text":""},{"location":"04-feature-list/#core-ride-features","title":"\ud83c\udfaf Core Ride Features","text":"<ul> <li>Book a ride (car, bike, carpool)</li> <li>Real-time driver tracking</li> <li>In-app payments &amp; fare estimate</li> <li>Trip cancellation &amp; refund logic</li> <li>OTP-based ride start verification</li> <li>Rating &amp; feedback</li> </ul>"},{"location":"04-feature-list/#user-features","title":"\ud83d\udc64 User Features","text":"<ul> <li>Signup/Login with OTP or email</li> <li>User profile management</li> <li>Saved locations (Home, Work)</li> <li>Trip history &amp; invoices</li> <li>Wallet &amp; referral system</li> </ul>"},{"location":"04-feature-list/#driver-features","title":"\ud83d\udc68\u200d\u2708\ufe0f Driver Features","text":"<ul> <li>Driver registration (KYC, license)</li> <li>Online/Offline toggle</li> <li>Ride acceptance/rejection</li> <li>Earning reports &amp; transaction history</li> <li>Navigation &amp; chat with rider</li> </ul>"},{"location":"04-feature-list/#payments","title":"\ud83d\udcb0 Payments","text":"<ul> <li>Fare calculation logic</li> <li>Promo codes, surge pricing</li> <li>Payment modes: card, wallet, UPI, cash</li> <li>Refund processing</li> <li>Wallet top-up</li> </ul>"},{"location":"04-feature-list/#notifications","title":"\ud83d\udd14 Notifications","text":"<ul> <li>Push notifications</li> <li>SMS updates (ride status, OTP)</li> <li>Email receipts</li> </ul>"},{"location":"04-feature-list/#admin-panel","title":"\ud83e\uddd1\u200d\ud83d\udcbc Admin Panel","text":"<ul> <li>Manage users &amp; drivers</li> <li>View rides and revenue reports</li> <li>Manual ride assignment</li> <li>Block/unblock accounts</li> <li>Manage surge and service areas</li> </ul>"},{"location":"04-feature-list/#analytics","title":"\ud83d\udcca Analytics","text":"<ul> <li>Daily/weekly/monthly reports</li> <li>Peak hour ride patterns</li> <li>Heatmaps of active zones</li> <li>Cancellation &amp; completion ratios</li> </ul>"},{"location":"04-feature-list/#security","title":"\ud83d\udd12 Security","text":"<ul> <li>JWT-based auth</li> <li>Role-based access</li> <li>Rate limiting &amp; monitoring</li> </ul>"},{"location":"05-user-flows/","title":"\ud83d\udd04 User Flows","text":"<p>This document outlines the key user flows in the RiderX platform for both Riders (Users) and Drivers.</p>"},{"location":"05-user-flows/#rider-user-flows","title":"\ud83d\udc64 Rider (User) Flows","text":""},{"location":"05-user-flows/#1-signup-login","title":"1. Signup &amp; Login","text":"<ul> <li>User enters mobile/email</li> <li>OTP verification (via Twilio/SMS)</li> <li>Create user profile (name, gender, photo, etc.)</li> <li>JWT token issued</li> </ul>"},{"location":"05-user-flows/#2-book-a-ride","title":"2. Book a Ride","text":"<ul> <li>User selects ride type (car/bike/carpool)</li> <li>Enters pickup and drop location</li> <li>Gets fare estimate and ETAs</li> <li>Confirms ride \u2192 sent to nearby drivers</li> </ul>"},{"location":"05-user-flows/#3-ride-experience","title":"3. Ride Experience","text":"<ul> <li>Real-time driver tracking</li> <li>Driver arrives \u2192 OTP to start ride</li> <li>In-ride tracking and route display</li> <li>End ride \u2192 payment auto-initiated</li> </ul>"},{"location":"05-user-flows/#4-payments-feedback","title":"4. Payments &amp; Feedback","text":"<ul> <li>Fare displayed with invoice breakdown</li> <li>Payment via wallet/UPI/card/cash</li> <li>User rates the driver (1\u20135 stars)</li> <li>Can report issue or request refund</li> </ul>"},{"location":"05-user-flows/#driver-flows","title":"\ud83d\ude97 Driver Flows","text":""},{"location":"05-user-flows/#1-onboarding","title":"1. Onboarding","text":"<ul> <li>Driver signs up with phone number</li> <li>Uploads documents: license, RC, insurance</li> <li>Admin verification (manual or automated)</li> <li>Profile approved \u2192 status: \"Available\"</li> </ul>"},{"location":"05-user-flows/#2-accept-ride","title":"2. Accept Ride","text":"<ul> <li>Driver receives ride request (location + fare)</li> <li>Can accept/reject within 15 seconds</li> <li>Upon acceptance, GPS nav starts</li> <li>Ride begins after OTP validation</li> </ul>"},{"location":"05-user-flows/#3-ride-execution","title":"3. Ride Execution","text":"<ul> <li>Navigate to destination</li> <li>End ride, collect fare (if needed)</li> <li>Earnings summary displayed</li> </ul>"},{"location":"05-user-flows/#adminsupport-flows","title":"\ud83d\udee0 Admin/Support Flows","text":""},{"location":"05-user-flows/#1-dashboard-login","title":"1. Dashboard Login","text":"<ul> <li>Secure admin access (RBAC protected)</li> <li>Manage rides, users, drivers</li> </ul>"},{"location":"05-user-flows/#2-ride-monitoring","title":"2. Ride Monitoring","text":"<ul> <li>Live ride map</li> <li>Can reassign/cancel/override rides if needed</li> </ul>"},{"location":"05-user-flows/#3-dispute-handling","title":"3. Dispute Handling","text":"<ul> <li>View and resolve complaints</li> <li>Initiate refunds or warnings</li> </ul>"},{"location":"05-user-flows/#other-flows","title":"\ud83d\udd01 Other Flows","text":"<ul> <li>Password reset via OTP/email</li> <li>Logout and token invalidation</li> <li>Notification preferences</li> <li>Referral and reward tracking</li> </ul>"},{"location":"06-database-design/","title":"\ud83d\uddc3\ufe0f Database Design","text":"<p>This section outlines the core relational schema for RiderX using PostgreSQL. It focuses on normalization, integrity, scalability, and extensibility.</p>"},{"location":"06-database-design/#user-table","title":"\ud83e\uddd1 User Table","text":"<pre><code>Table: users\n- id (UUID, PK)\n- name (VARCHAR)\n- phone (VARCHAR, UNIQUE)\n- email (VARCHAR, UNIQUE)\n- password_hash (TEXT) \u2014 optional if using OTP only\n- role (ENUM: USER, DRIVER, ADMIN)\n- referral_code (VARCHAR)\n- created_at (TIMESTAMP)\n- updated_at (TIMESTAMP)\n````\n\n---\n\n## \ud83d\ude97 Driver Table\n\n```sql\nTable: drivers\n- id (UUID, PK)\n- user_id (FK \u2192 users.id)\n- license_number (VARCHAR)\n- vehicle_number (VARCHAR)\n- vehicle_type (ENUM: BIKE, CAR)\n- is_verified (BOOLEAN)\n- is_online (BOOLEAN)\n- average_rating (FLOAT)\n- total_rides (INT)\n</code></pre>"},{"location":"06-database-design/#rides-table","title":"\ud83d\ude98 Rides Table","text":"<pre><code>Table: rides\n- id (UUID, PK)\n- rider_id (FK \u2192 users.id)\n- driver_id (FK \u2192 drivers.id)\n- pickup_lat (DECIMAL)\n- pickup_lng (DECIMAL)\n- drop_lat (DECIMAL)\n- drop_lng (DECIMAL)\n- status (ENUM: REQUESTED, ACCEPTED, STARTED, COMPLETED, CANCELLED)\n- ride_type (ENUM: CAR, BIKE, CARPOOL)\n- start_time (TIMESTAMP)\n- end_time (TIMESTAMP)\n- fare_amount (DECIMAL)\n- payment_mode (ENUM: WALLET, UPI, CARD, CASH)\n- rating (INT)\n</code></pre>"},{"location":"06-database-design/#payments-table","title":"\ud83d\udcb3 Payments Table","text":"<pre><code>Table: payments\n- id (UUID, PK)\n- ride_id (FK \u2192 rides.id)\n- user_id (FK \u2192 users.id)\n- amount (DECIMAL)\n- status (ENUM: PENDING, COMPLETED, FAILED)\n- transaction_ref (VARCHAR)\n- provider (ENUM: RAZORPAY, STRIPE, CASHFREE, CASH)\n- created_at (TIMESTAMP)\n</code></pre>"},{"location":"06-database-design/#notifications-table","title":"\ud83d\udd14 Notifications Table","text":"<pre><code>Table: notifications\n- id (UUID, PK)\n- user_id (FK \u2192 users.id)\n- title (TEXT)\n- body (TEXT)\n- type (ENUM: SMS, PUSH, EMAIL)\n- status (ENUM: SENT, FAILED, PENDING)\n- sent_at (TIMESTAMP)\n</code></pre>"},{"location":"06-database-design/#location-cache-redis-schema","title":"\ud83d\uddfa\ufe0f Location Cache (Redis Schema)","text":"<ul> <li><code>driver_location:{driver_id}</code> \u2192 (lat, lng, timestamp)</li> <li><code>active_rides:{user_id}</code> \u2192 rideId + status</li> <li><code>otp:{user_id}</code> \u2192 current OTP (TTL: 2 mins)</li> </ul>"},{"location":"06-database-design/#optional-tables-for-future","title":"Optional Tables (for future)","text":"<ul> <li><code>support_tickets</code></li> <li><code>promo_codes</code></li> <li><code>referrals</code></li> <li><code>ratings_and_reviews</code></li> </ul>"},{"location":"07-api-design/","title":"\ud83c\udf10 API Design","text":"<p>This section describes the RESTful API endpoints for the RiderX platform. All endpoints follow REST conventions, return JSON responses, and are protected via JWT authentication unless noted.</p> <p>Base URL (example): <code>https://api.riderx.in/v1</code></p>"},{"location":"07-api-design/#auth-apis","title":"\ud83d\udd10 Auth APIs","text":""},{"location":"07-api-design/#post-authsignup","title":"POST <code>/auth/signup</code>","text":"<pre><code>{ \"phone\": \"+919999999999\" }\n````\n\n### POST `/auth/verify-otp`\n\n```json\n{ \"phone\": \"+919999999999\", \"otp\": \"123456\" }\n</code></pre>"},{"location":"07-api-design/#post-authlogin","title":"POST <code>/auth/login</code>","text":"<pre><code>{ \"phone\": \"+919999999999\", \"otp\": \"123456\" }\n</code></pre>"},{"location":"07-api-design/#post-authlogout","title":"POST <code>/auth/logout</code>","text":"<p>Invalidates current token</p>"},{"location":"07-api-design/#user-apis","title":"\ud83d\udc64 User APIs","text":""},{"location":"07-api-design/#get-userprofile","title":"GET <code>/user/profile</code>","text":"<p>Fetches logged-in user profile</p>"},{"location":"07-api-design/#put-userprofile","title":"PUT <code>/user/profile</code>","text":"<pre><code>{ \"name\": \"Aman\", \"email\": \"aman@example.com\", \"photo\": \"s3-url\" }\n</code></pre>"},{"location":"07-api-design/#get-userrides","title":"GET <code>/user/rides</code>","text":"<p>List of past rides</p>"},{"location":"07-api-design/#ride-apis","title":"\ud83d\ude98 Ride APIs","text":""},{"location":"07-api-design/#post-ridesbook","title":"POST <code>/rides/book</code>","text":"<pre><code>{\n  \"pickup\": { \"lat\": 28.61, \"lng\": 77.23 },\n  \"drop\": { \"lat\": 28.70, \"lng\": 77.10 },\n  \"type\": \"CAR\"\n}\n</code></pre>"},{"location":"07-api-design/#get-ridesestimate","title":"GET <code>/rides/estimate</code>","text":"<pre><code>{ \"pickup\": {...}, \"drop\": {...}, \"type\": \"CAR\" }\n</code></pre>"},{"location":"07-api-design/#get-ridesidstatus","title":"GET <code>/rides/:id/status</code>","text":"<p>Real-time ride status</p>"},{"location":"07-api-design/#post-ridesidcancel","title":"POST <code>/rides/:id/cancel</code>","text":"<p>Rider cancels the ride</p>"},{"location":"07-api-design/#driver-apis","title":"\ud83d\ude97 Driver APIs","text":""},{"location":"07-api-design/#post-drivergo-online","title":"POST <code>/driver/go-online</code>","text":"<p>Marks driver available</p>"},{"location":"07-api-design/#post-drivergo-offline","title":"POST <code>/driver/go-offline</code>","text":"<p>Marks driver unavailable</p>"},{"location":"07-api-design/#get-driverride-requests","title":"GET <code>/driver/ride-requests</code>","text":"<p>Fetches nearby requests</p>"},{"location":"07-api-design/#post-driveraccept-ride","title":"POST <code>/driver/accept-ride</code>","text":"<pre><code>{ \"ride_id\": \"uuid\" }\n</code></pre>"},{"location":"07-api-design/#post-driverstart-ride","title":"POST <code>/driver/start-ride</code>","text":"<pre><code>{ \"ride_id\": \"uuid\", \"otp\": \"1234\" }\n</code></pre>"},{"location":"07-api-design/#post-driverend-ride","title":"POST <code>/driver/end-ride</code>","text":"<pre><code>{ \"ride_id\": \"uuid\" }\n</code></pre>"},{"location":"07-api-design/#payment-apis","title":"\ud83d\udcb3 Payment APIs","text":""},{"location":"07-api-design/#post-paymentinitiate","title":"POST <code>/payment/initiate</code>","text":"<pre><code>{ \"ride_id\": \"uuid\", \"mode\": \"UPI\" }\n</code></pre>"},{"location":"07-api-design/#get-paymentstatusride_id","title":"GET <code>/payment/status/:ride_id</code>","text":"<p>Status of payment transaction</p>"},{"location":"07-api-design/#admin-apis-secured-with-rbac","title":"\u2699\ufe0f Admin APIs (secured with RBAC)","text":"<ul> <li><code>GET /admin/dashboard</code></li> <li><code>GET /admin/users</code></li> <li><code>GET /admin/rides</code></li> <li><code>PATCH /admin/resolve-dispute</code></li> <li><code>DELETE /admin/driver/:id</code></li> </ul>"},{"location":"07-api-design/#common-standards","title":"\ud83e\uddea Common Standards","text":"<ul> <li>All API responses are wrapped:</li> </ul> <pre><code>{\n  \"success\": true,\n  \"data\": {},\n  \"message\": \"Ride booked successfully\"\n}\n</code></pre> <ul> <li>Standard HTTP status codes used</li> <li>Rate-limited via API gateway (e.g., AWS API Gateway / Nginx / Kong)</li> </ul>"},{"location":"08-devops-and-infra/","title":"\ud83d\udee0\ufe0f DevOps &amp; Infrastructure","text":"<p>This document outlines the CI/CD pipeline, hosting setup, monitoring, and infrastructure tools used to manage RiderX in production.</p>"},{"location":"08-devops-and-infra/#infrastructure-stack","title":"\ud83e\uddf1 Infrastructure Stack","text":"<ul> <li>Cloud Provider: AWS (EC2, RDS, S3, CloudWatch, IAM)</li> <li>Database: PostgreSQL (Amazon RDS)</li> <li>Containerization: Docker</li> <li>Orchestration: Docker Compose (initial), Kubernetes (future)</li> <li>Domain &amp; SSL: Route53 + ACM</li> </ul>"},{"location":"08-devops-and-infra/#cicd-pipeline","title":"\ud83d\udd01 CI/CD Pipeline","text":"<ul> <li>Source Control: GitHub</li> <li>CI/CD Tool: GitHub Actions</li> </ul>"},{"location":"08-devops-and-infra/#pipeline-steps","title":"Pipeline Steps","text":"<ol> <li>\u2705 Lint, format, run tests</li> <li>\ud83d\udd10 Secrets loaded from GitHub Secrets</li> <li>\ud83d\udc33 Build &amp; push Docker image to GHCR</li> <li>\ud83d\ude80 Deploy via SSH or Terraform on EC2</li> </ol>"},{"location":"08-devops-and-infra/#secrets-management","title":"\ud83d\udd10 Secrets Management","text":"<ul> <li>Stored securely in GitHub Secrets and EC2 env vars</li> <li>Example keys: <code>JWT_SECRET</code>, <code>AWS_ACCESS_KEY</code>, <code>DB_PASSWORD</code></li> </ul>"},{"location":"08-devops-and-infra/#deployment-targets","title":"\ud83d\udce6 Deployment Targets","text":"<ul> <li>Backend: EC2 instance with Docker</li> <li>Frontend: GitHub Pages (initial), then S3 + CloudFront</li> <li>Monitoring: CloudWatch logs + UptimeRobot (basic alerts)</li> </ul>"},{"location":"08-devops-and-infra/#environments","title":"\ud83e\uddea Environments","text":"<ul> <li>Development: <code>.env.dev</code> with mock services</li> <li>Staging: Pre-prod replica, test payments enabled</li> <li>Production: Fully secure, audited logs, real payment integrations</li> </ul>"},{"location":"08-devops-and-infra/#backups-rollbacks","title":"\ud83d\udce4 Backups &amp; Rollbacks","text":"<ul> <li>PostgreSQL: RDS snapshots daily</li> <li>App Logs: Shipped to CloudWatch + local S3 backup</li> <li>Rollback Strategy: Docker image version pinning</li> </ul>"},{"location":"09-security-best-practices/","title":"\ud83d\udd10 Security Best Practices","text":"<p>Security is critical for a platform handling real-time rides, payments, and identity. This document summarizes practices across backend, frontend, and infrastructure.</p>"},{"location":"09-security-best-practices/#authentication-authorization","title":"\ud83d\udd12 Authentication &amp; Authorization","text":"<ul> <li>JWT-based token authentication with expiry &amp; refresh token</li> <li>Role-Based Access Control (RBAC) for all routes</li> <li>Admin-only actions gated with scopes</li> </ul>"},{"location":"09-security-best-practices/#data-validation","title":"\ud83e\uddfe Data Validation","text":"<ul> <li>DTOs + Bean Validation in Spring Boot</li> <li>Strict type checking in API payloads</li> <li>Global error handler for structured responses</li> </ul>"},{"location":"09-security-best-practices/#payment-safety","title":"\ud83d\udcb3 Payment Safety","text":"<ul> <li>PCI-compliant payment gateway (Razorpay, Stripe)</li> <li>Webhook verification and replay protection</li> <li>Amount calculation on server, not client</li> </ul>"},{"location":"09-security-best-practices/#api-network-security","title":"\ud83d\udee1\ufe0f API &amp; Network Security","text":"<ul> <li>HTTPS enforced everywhere</li> <li>Rate limiting via API Gateway (or Nginx)</li> <li>Input sanitization to prevent XSS, SQLi</li> </ul>"},{"location":"09-security-best-practices/#secrets-config","title":"\ud83d\udd10 Secrets &amp; Config","text":"<ul> <li>No secrets in Git tracked files</li> <li>Use <code>.env</code>, AWS Parameter Store or Vault</li> <li>GitHub Secrets for CI/CD workflows</li> </ul>"},{"location":"09-security-best-practices/#auditing-monitoring","title":"\ud83d\udccb Auditing &amp; Monitoring","text":"<ul> <li>Admin actions are logged (IP, time, action)</li> <li>CloudWatch + Sentry/LogRocket for incident reporting</li> <li>Alerting on failed payments, suspicious login attempts</li> </ul>"},{"location":"09-security-best-practices/#compliance-legal","title":"\u2705 Compliance &amp; Legal","text":"<ul> <li>GDPR-like consent and privacy policy</li> <li>Opt-in for notifications</li> <li>Ability to export or delete user account</li> </ul>"},{"location":"09-security-best-practices/#regular-practices","title":"\ud83d\udd04 Regular Practices","text":"<ul> <li>Dependency updates with Renovatebot</li> <li>Security scans (e.g., Trivy, OWASP ZAP)</li> <li>Manual penetration testing for major releases</li> </ul>"},{"location":"10-future-roadmap/","title":"\ud83d\ude80 Future Roadmap","text":"<p>This document outlines upcoming features, enhancements, and scalability plans for the RiderX platform.</p>"},{"location":"10-future-roadmap/#phase-2-features","title":"\ud83e\udde9 Phase 2 Features","text":"<ul> <li>\ud83c\udfaf Real-time surge pricing</li> <li>\ud83c\udf10 Multilingual support (i18n)</li> <li>\ud83e\uddfe GST invoicing and business rides</li> <li>\ud83d\udcf2 Rider-Driver in-app chat</li> <li>\ud83c\udf81 Promotions and loyalty rewards</li> </ul>"},{"location":"10-future-roadmap/#aiml-additions","title":"\ud83e\udde0 AI/ML Additions","text":"<ul> <li>\ud83d\ude95 Predictive pricing and demand hotspots</li> <li>\ud83d\uded1 Fraud detection for fake rides/payments</li> <li>\ud83d\udcac Smart chatbot for rider support</li> </ul>"},{"location":"10-future-roadmap/#native-apps","title":"\ud83d\udcf1 Native Apps","text":"<ul> <li>Rewrite Flutter PWA into native iOS + Android (Kotlin/Swift)</li> <li>Deep linking and app indexing</li> </ul>"},{"location":"10-future-roadmap/#infra-upgrades","title":"\u2601\ufe0f Infra Upgrades","text":"<ul> <li>Kubernetes with autoscaling groups</li> <li>Multi-region PostgreSQL read replicas</li> <li>Full S3-based asset CDN with CloudFront</li> </ul>"},{"location":"10-future-roadmap/#security-enhancements","title":"\ud83d\udd12 Security Enhancements","text":"<ul> <li>Device fingerprinting and login alerts</li> <li>Advanced admin audit logs with action trail</li> <li>Bug bounty program for vulnerability reporting</li> </ul>"},{"location":"10-future-roadmap/#enterprise-b2b","title":"\ud83c\udfe2 Enterprise &amp; B2B","text":"<ul> <li>B2B accounts and monthly billing</li> <li>Corporate ride management dashboard</li> <li>Private driver fleets for large companies</li> </ul>"},{"location":"10-future-roadmap/#experimental-ideas","title":"\ud83e\uddea Experimental Ideas","text":"<ul> <li>EV charging station rides</li> <li>Subscriptions for unlimited bike rides</li> <li>Integration with metro/train last-mile rides</li> </ul>"},{"location":"11-admin-panel/","title":"\ud83d\udee0\ufe0f Admin Panel Specification","text":"<p>The RiderX admin panel provides dashboards and tools for managing users, drivers, rides, disputes, payments, and system health.</p>"},{"location":"11-admin-panel/#core-features","title":"\ud83c\udf9b\ufe0f Core Features","text":""},{"location":"11-admin-panel/#dashboard","title":"Dashboard","text":"<ul> <li>Total rides, revenue, new users (weekly/monthly)</li> <li>Live map of active rides and drivers</li> <li>Alerts and flagged rides</li> </ul>"},{"location":"11-admin-panel/#users-drivers","title":"Users &amp; Drivers","text":"<ul> <li>Search, filter, view user/driver profile</li> <li>Suspend, block or delete users</li> <li>View KYC and ride history</li> </ul>"},{"location":"11-admin-panel/#ride-management","title":"Ride Management","text":"<ul> <li>View live, completed, cancelled rides</li> <li>Force-cancel or reassign driver</li> <li>Download ride reports</li> </ul>"},{"location":"11-admin-panel/#disputes","title":"Disputes","text":"<ul> <li>Customer or driver complaints</li> <li>Chat logs and ride context</li> <li>Resolution and refund options</li> </ul>"},{"location":"11-admin-panel/#payments-settlements","title":"Payments &amp; Settlements","text":"<ul> <li>Reconcile daily payouts to drivers</li> <li>Payment gateway report integration</li> <li>Refund status, invoice re-generation</li> </ul>"},{"location":"11-admin-panel/#access-control","title":"\ud83d\udd10 Access Control","text":"<ul> <li>Admin roles: <code>SUPER_ADMIN</code>, <code>OPS_MANAGER</code>, <code>SUPPORT_AGENT</code></li> <li>Permissions: View-only, CRUD, Export-only, Resolve-disputes</li> </ul>"},{"location":"11-admin-panel/#tech-stack-optional","title":"\ud83d\udcbb Tech Stack (Optional)","text":"<ul> <li>Frontend: React + Tailwind + TanStack Table</li> <li>Backend: Admin APIs (Node.js or Spring Boot)</li> <li>Auth: JWT with admin role claims</li> </ul>"},{"location":"11-admin-panel/#audit-logs","title":"\ud83d\udccb Audit Logs","text":"<ul> <li>Every admin action is logged</li> <li>IP, timestamp, action type, object affected</li> <li>Immutable storage (S3 or CloudWatch)</li> </ul>"},{"location":"12-testing-strategy/","title":"\ud83e\uddea Testing Strategy","text":"<p>To ensure RiderX is reliable and bug-free, we adopt a multi-layered testing approach covering backend, frontend, and infrastructure.</p>"},{"location":"12-testing-strategy/#unit-testing","title":"\u2705 Unit Testing","text":"<ul> <li>Tools: JUnit + Mockito (Spring Boot)</li> <li>Test service methods, mappers, validators</li> <li>Example: fare calculation, distance logic, OTP generator</li> </ul>"},{"location":"12-testing-strategy/#integration-testing","title":"\ud83e\udde9 Integration Testing","text":"<ul> <li>REST API contract tests using Spring\u2019s <code>@WebMvcTest</code></li> <li>H2 in-memory DB for test isolation</li> <li>Payment and notification mock services</li> </ul>"},{"location":"12-testing-strategy/#end-to-end-e2e-testing","title":"\ud83e\uddea End-to-End (E2E) Testing","text":"<ul> <li>Tool: Postman Collection Runner / Playwright (future)</li> <li>Simulate signup \u2192 book ride \u2192 pay \u2192 rate ride</li> <li>Daily test suite for staging environment</li> </ul>"},{"location":"12-testing-strategy/#cicd-pipeline-testing","title":"\ud83d\udd01 CI/CD Pipeline Testing","text":"<ul> <li>Linting + test coverage check in GitHub Actions</li> <li>Docker container boot test with health endpoint check</li> </ul>"},{"location":"12-testing-strategy/#mobile-testing","title":"\ud83d\udcf2 Mobile Testing","text":"<ul> <li>Flutter integration tests using <code>integration_test</code> package</li> <li>Simulated device taps and input</li> </ul>"},{"location":"12-testing-strategy/#load-stress-testing","title":"\ud83d\udd2c Load &amp; Stress Testing","text":"<ul> <li>Tool: k6 or JMeter</li> <li>Simulate 10k+ ride requests under surge</li> </ul>"},{"location":"12-testing-strategy/#coverage-quality","title":"\ud83d\udcc8 Coverage &amp; Quality","text":"<ul> <li>Goal: 80%+ coverage on services/controllers</li> <li>Tools: Jacoco, SonarQube (optional)</li> <li>Code review checklist enforced via PR templates</li> </ul>"},{"location":"13-branding-and-ux/","title":"\ud83c\udfa8 Branding &amp; UX Guidelines","text":"<p>This document covers branding, color schemes, UI tone, and accessibility guidelines to ensure RiderX is friendly, trusted, and consistent.</p>"},{"location":"13-branding-and-ux/#colors","title":"\ud83c\udf08 Colors","text":"<ul> <li>Primary: <code>#EA580C</code> (Orange)</li> <li>Secondary: <code>#FFFFFF</code> (White), <code>#1F2937</code> (Charcoal)</li> <li>Accent: <code>#FFD29D</code>, <code>#FFF7ED</code></li> </ul>"},{"location":"13-branding-and-ux/#usage","title":"Usage","text":"<ul> <li>Buttons: Orange</li> <li>Backgrounds: Light with contrast text</li> <li>Alerts: Green (success), Red (error), Yellow (warning)</li> </ul>"},{"location":"13-branding-and-ux/#typography","title":"\ud83d\udd20 Typography","text":"<ul> <li>Fonts: Inter / Open Sans</li> <li>Weights: Regular, Medium, Semi-bold</li> <li>Size guide:<ul> <li>H1: 32px</li> <li>H2: 24px</li> <li>Body: 16px</li> </ul> </li> </ul>"},{"location":"13-branding-and-ux/#app-ux-principles","title":"\ud83d\udcf1 App UX Principles","text":"<ul> <li>\ud83e\udded Navigation: Bottom tab bar (Rider), Side drawer (Driver)</li> <li>\ud83d\udccd Maps: Default location access with permissions</li> <li>\u26a1 Speed: Lazy loading, fast transitions</li> <li>\ud83d\udc46 Tap targets: Min 44x44 px</li> </ul>"},{"location":"13-branding-and-ux/#accessibility","title":"\ud83e\uddd1 Accessibility","text":"<ul> <li>High contrast ratio</li> <li>Alt tags for icons</li> <li>Voice-over support (Flutter + native)</li> </ul>"},{"location":"13-branding-and-ux/#logo-branding-assets","title":"\ud83d\uddbc\ufe0f Logo &amp; Branding Assets","text":"<ul> <li>Favicon, app icon, splash screen assets in <code>/assets</code></li> <li>Logo uses RiderX \u201cX\u201d with motion swirl effect</li> <li>Brand book: WIP (PDF to be added)</li> </ul>"},{"location":"14-api-design-guidelines/","title":"\ud83d\udcf1 API Versioning Strategy","text":"<p>To ensure backward compatibility and smooth upgrades, RiderX APIs will follow a strict versioning policy.</p>"},{"location":"14-api-design-guidelines/#versioning-approach","title":"\ud83d\udd22 Versioning Approach","text":"<ul> <li>Use URI path versioning: <code>/api/v1/...</code></li> <li>New major versions increment <code>vN</code> (e.g., <code>v2</code>)</li> <li>Minor or patch changes are backward-compatible and don\u2019t increment version number</li> </ul>"},{"location":"14-api-design-guidelines/#implementation-details","title":"\ud83d\udee0\ufe0f Implementation Details","text":"<ul> <li>Separate controllers or router groups per version</li> <li>Maintain older versions for at least 6 months after new major release</li> <li>Deprecation warnings in response headers and docs</li> </ul>"},{"location":"14-api-design-guidelines/#documentation","title":"\ud83d\udd0d Documentation","text":"<ul> <li>Version-specific Swagger docs available at <code>/api/v1/docs</code>, <code>/api/v2/docs</code></li> <li>Clear migration guides for breaking changes</li> </ul>"},{"location":"14-api-design-guidelines/#deployment","title":"\ud83d\ude80 Deployment","text":"<ul> <li>Version routing handled by API Gateway or backend routing layer</li> <li>Load balancer or reverse proxy routes requests to appropriate service version</li> </ul>"},{"location":"14-api-design-guidelines/#best-practices","title":"\u26a0\ufe0f Best Practices","text":"<ul> <li>Avoid breaking changes unless absolutely necessary</li> <li>Keep endpoints consistent and stable</li> <li>Deprecate old APIs with clear timelines</li> </ul>"},{"location":"15-data-privacy/","title":"\ud83d\udd12 Data Privacy and Compliance","text":"<p>RiderX is committed to protecting user data and complying with relevant data protection regulations.</p>"},{"location":"15-data-privacy/#applicable-regulations","title":"\ud83d\udcdc Applicable Regulations","text":"<ul> <li>GDPR (Europe)</li> <li>CCPA (California)</li> <li>Local data protection laws depending on operating regions</li> </ul>"},{"location":"15-data-privacy/#data-handling-principles","title":"\ud83d\udd10 Data Handling Principles","text":"<ul> <li>Collect only necessary data for service operation</li> <li>Store sensitive data (e.g., payment info, IDs) encrypted at rest and in transit</li> <li>Anonymize or pseudonymize user data where possible</li> </ul>"},{"location":"15-data-privacy/#user-rights","title":"\ud83d\udcca User Rights","text":"<ul> <li>Users can request access to their data</li> <li>Users can request data deletion (\"right to be forgotten\")</li> <li>Data portability support for exporting user data</li> </ul>"},{"location":"15-data-privacy/#security-measures","title":"\ud83d\udee1\ufe0f Security Measures","text":"<ul> <li>Role-based access control to data</li> <li>Regular audits and vulnerability scans</li> <li>Incident response plan for data breaches</li> </ul>"},{"location":"15-data-privacy/#data-retention","title":"\ud83d\uddc3\ufe0f Data Retention","text":"<ul> <li>Retain data only as long as necessary for business and legal purposes</li> <li>Automatic deletion or archiving policies for old data</li> </ul>"},{"location":"15-data-privacy/#third-party-sharing","title":"\ud83d\udd04 Third-party Sharing","text":"<ul> <li>Share data with payment gateways and partners only with user consent</li> <li>Data Processing Agreements with all third parties</li> </ul>"},{"location":"15-data-privacy/#privacy-policy","title":"\ud83d\udce2 Privacy Policy","text":"<ul> <li>Clear and accessible privacy policy presented at signup and app settings</li> <li>Transparent about data collection and usage</li> </ul>"},{"location":"16-analytics-and-monitoring/","title":"\ud83d\udcc8 Analytics and Monitoring Strategy","text":"<p>RiderX requires comprehensive analytics and monitoring to ensure smooth operations and data-driven decision making.</p>"},{"location":"16-analytics-and-monitoring/#analytics","title":"\ud83d\udcca Analytics","text":"<ul> <li>Track key user actions: signup, booking, cancellation, payments</li> <li>Event-based tracking using tools like Mixpanel, Amplitude, or Google Analytics</li> <li>Dashboard for marketing &amp; product teams to monitor user engagement and retention</li> <li>Cohort analysis for feature adoption and ride frequency</li> </ul>"},{"location":"16-analytics-and-monitoring/#monitoring","title":"\ud83d\udee0\ufe0f Monitoring","text":"<ul> <li>Infrastructure health monitoring (CPU, memory, disk)</li> <li>Application performance monitoring (APM) with tools like New Relic, Datadog, or Elastic APM</li> <li>Real-time alerting on critical issues (e.g., API latency, payment failures, server errors)</li> <li>Logs aggregation using ELK stack or cloud logging services (CloudWatch, Stackdriver)</li> </ul>"},{"location":"16-analytics-and-monitoring/#integration-points","title":"\ud83e\udde9 Integration Points","text":"<ul> <li>Custom dashboards in Grafana or Kibana</li> <li>Alerting via Slack, email, or PagerDuty</li> <li>Use distributed tracing to diagnose performance bottlenecks</li> </ul>"},{"location":"16-analytics-and-monitoring/#data-retention-privacy","title":"\ud83d\udd04 Data Retention &amp; Privacy","text":"<ul> <li>Anonymize logs where possible</li> <li>Retain logs and analytics data as per privacy policy and legal requirements</li> </ul>"},{"location":"17-deployment-and-ci-cd/","title":"\ud83d\ude80 Deployment and CI/CD Strategy","text":"<p>This document outlines the processes and tools for deploying RiderX backend and frontend components safely and efficiently.</p>"},{"location":"17-deployment-and-ci-cd/#cicd-pipeline","title":"\ud83d\udee0\ufe0f CI/CD Pipeline","text":"<ul> <li>Tools: GitHub Actions / Jenkins / GitLab CI</li> <li>Steps:<ol> <li>Code linting and formatting checks</li> <li>Unit and integration test execution</li> <li>Build Docker images</li> <li>Push images to container registry (e.g., AWS ECR, Docker Hub)</li> <li>Deploy to staging environment automatically</li> <li>Manual approval for production deployment</li> </ol> </li> </ul>"},{"location":"17-deployment-and-ci-cd/#environments","title":"\ud83c\udf0d Environments","text":"<ul> <li>Development: Local machines and dev environment</li> <li>Staging: Mirror of production for QA/testing</li> <li>Production: Live environment serving users</li> </ul>"},{"location":"17-deployment-and-ci-cd/#deployment-targets","title":"\ud83e\uddf0 Deployment Targets","text":"<ul> <li>Backend services on Kubernetes clusters or ECS</li> <li>Frontend on CDN (e.g., AWS CloudFront, Netlify)</li> <li>Database migrations automated via Flyway or Liquibase</li> </ul>"},{"location":"17-deployment-and-ci-cd/#rollbacks-and-blue-green-deployment","title":"\ud83d\udd04 Rollbacks and Blue-Green Deployment","text":"<ul> <li>Use blue-green or canary deployments to minimize downtime</li> <li>Automated rollback triggers on failed health checks</li> </ul>"},{"location":"17-deployment-and-ci-cd/#secrets-management","title":"\ud83d\udd10 Secrets Management","text":"<ul> <li>Use HashiCorp Vault or cloud provider secret managers</li> <li>Never hardcode secrets or API keys in repos</li> </ul>"},{"location":"17-deployment-and-ci-cd/#documentation","title":"\ud83d\udcc4 Documentation","text":"<ul> <li>Maintain deployment runbooks and incident response guides</li> <li>Automated deployment logs and audit trails</li> </ul>"},{"location":"18-maintenance-and-support/","title":"\ud83d\udee0\ufe0f Maintenance and Support","text":"<p>This document covers the plans for ongoing maintenance, bug fixes, and user support for RiderX.</p>"},{"location":"18-maintenance-and-support/#maintenance","title":"\ud83d\udd04 Maintenance","text":"<ul> <li>Regular dependency updates and patching</li> <li>Database backups and integrity checks</li> <li>Performance tuning based on monitoring insights</li> <li>Security audits and penetration testing</li> </ul>"},{"location":"18-maintenance-and-support/#bug-tracking-and-fixes","title":"\ud83d\udc1e Bug Tracking and Fixes","text":"<ul> <li>Use Jira or GitHub Issues for bug tracking</li> <li>Triage bugs by severity and impact</li> <li>Regular sprint cycles for bug fixes and improvements</li> </ul>"},{"location":"18-maintenance-and-support/#user-support","title":"\ud83d\udcde User Support","text":"<ul> <li>Multi-channel support: In-app chat, email, phone</li> <li>Support ticketing system integrated with CRM</li> <li>SLAs for response and resolution times</li> <li>FAQ and knowledge base for common issues</li> </ul>"},{"location":"18-maintenance-and-support/#developer-support","title":"\ud83e\uddd1\u200d\ud83d\udcbb Developer Support","text":"<ul> <li>Documentation for APIs and onboarding</li> <li>Code review and pair programming sessions</li> <li>Slack or Teams channels for real-time collaboration</li> </ul>"},{"location":"18-maintenance-and-support/#maintenance-windows","title":"\ud83d\udcc5 Maintenance Windows","text":"<ul> <li>Schedule periodic downtime notifications</li> <li>Perform maintenance during low-usage hours</li> <li>Use feature flags to rollout changes gradually</li> </ul>"},{"location":"19-future-roadmap/","title":"\ud83d\ude80 Future Roadmap","text":"<p>This roadmap outlines planned features and improvements for RiderX beyond the MVP launch.</p>"},{"location":"19-future-roadmap/#short-term-0-6-months","title":"\ud83d\udcc5 Short-term (0-6 months)","text":"<ul> <li>Multi-city support and geofencing</li> <li>Loyalty and referral programs</li> <li>Real-time driver rating and feedback system</li> <li>Push notifications and in-app messaging</li> </ul>"},{"location":"19-future-roadmap/#mid-term-6-12-months","title":"\ud83d\udcc5 Mid-term (6-12 months)","text":"<ul> <li>Dynamic surge pricing algorithm</li> <li>Support for additional vehicle types (e.g., auto rickshaws)</li> <li>Advanced analytics dashboard for drivers and admins</li> <li>Integration with third-party payment wallets</li> </ul>"},{"location":"19-future-roadmap/#long-term-1-2-years","title":"\ud83d\udcc5 Long-term (1-2 years)","text":"<ul> <li>Autonomous vehicle support (pilot projects)</li> <li>AI-driven route optimization and driver dispatch</li> <li>Multi-language support and localization</li> <li>API marketplace for third-party integrations</li> </ul>"},{"location":"19-future-roadmap/#innovation-and-experimentation","title":"\ud83d\udca1 Innovation and Experimentation","text":"<ul> <li>Micro-mobility options (e-scooters, bikes)</li> <li>Subscription-based ride packages</li> <li>Carbon footprint tracking and green ride options</li> <li>Integration with public transport APIs</li> </ul>"},{"location":"19-future-roadmap/#business-scaling","title":"\ud83d\udcc8 Business Scaling","text":"<ul> <li>Franchise and partner management modules</li> <li>Enterprise ride solutions for corporates</li> <li>Expansion to international markets</li> </ul>"},{"location":"20-glossary/","title":"\ud83d\udcda Glossary","text":"<p>A list of key terms and acronyms used throughout RiderX documentation.</p> Term Description API Application Programming Interface APM Application Performance Monitoring CDN Content Delivery Network CI/CD Continuous Integration / Continuous Deployment DB Database GDPR General Data Protection Regulation JWT JSON Web Token KYC Know Your Customer (identity verification process) SLA Service Level Agreement UI User Interface UX User Experience MVP Minimum Viable Product OTP One-Time Password PCI DSS Payment Card Industry Data Security Standard REST Representational State Transfer (API style) SDK Software Development Kit SLA Service Level Agreement UX User Experience <p>Note: This glossary will be updated as the project evolves.</p>"},{"location":"21-faq/","title":"\u2753 Frequently Asked Questions (FAQ)","text":"<p>This section answers common questions about RiderX\u2019s development, deployment, and operations.</p>"},{"location":"21-faq/#q1-what-technologies-are-used-to-build-riderx","title":"Q1: What technologies are used to build RiderX?","text":"<ul> <li>Backend: Spring Boot (Java), PostgreSQL</li> <li>Frontend: Flutter (mobile apps)</li> <li>Infrastructure: AWS (ECS, RDS, S3), Docker, Kubernetes (future)</li> <li>CI/CD: GitHub Actions</li> </ul>"},{"location":"21-faq/#q2-how-do-you-handle-scalability","title":"Q2: How do you handle scalability?","text":"<ul> <li>Microservices architecture planned</li> <li>Kubernetes for container orchestration</li> <li>Auto-scaling groups on cloud provider</li> <li>Load balancers and caching layers</li> </ul>"},{"location":"21-faq/#q3-how-is-user-data-protected","title":"Q3: How is user data protected?","text":"<ul> <li>Encryption at rest and in transit</li> <li>Role-based access control</li> <li>Compliance with GDPR and CCPA</li> <li>Regular security audits</li> </ul>"},{"location":"21-faq/#q4-how-can-developers-contribute","title":"Q4: How can developers contribute?","text":"<ul> <li>Fork the GitHub repo</li> <li>Follow coding standards and PR templates</li> <li>Submit issues and pull requests</li> <li>Participate in code reviews</li> </ul>"},{"location":"21-faq/#q5-what-is-the-roadmap-for-new-features","title":"Q5: What is the roadmap for new features?","text":"<ul> <li>See the detailed roadmap in <code>/docs/19-future-roadmap.md</code></li> </ul>"},{"location":"21-faq/#q6-how-are-payments-handled","title":"Q6: How are payments handled?","text":"<ul> <li>Integration with payment gateways like Stripe or Razorpay</li> <li>PCI DSS compliance for handling card data</li> <li>Secure tokenization for payment info</li> </ul>"},{"location":"21-faq/#q7-what-are-the-plans-for-international-expansion","title":"Q7: What are the plans for international expansion?","text":"<ul> <li>Multi-language support</li> <li>Local regulatory compliance</li> <li>Partnerships with local operators</li> </ul> <p>If you have more questions, please contact the RiderX team.</p>"},{"location":"22-contributing/","title":"\ud83e\udd1d Contributing to RiderX","text":"<p>We welcome contributions from developers, designers, testers, and writers. Help us build the future of urban mobility.</p>"},{"location":"22-contributing/#how-to-contribute","title":"\ud83e\uddd1\u200d\ud83d\udcbb How to Contribute","text":"<ol> <li>Fork the repository on GitHub.</li> <li> <p>Clone your fork and create a new branch:    ```bash    git checkout -b feature/your-feature-name     ````</p> </li> <li> <p>Code your changes following our style guidelines.</p> </li> <li>Test your changes locally.</li> <li>Commit with a clear message:</li> </ol> <p><code>bash    git commit -m \"feat: add new ride option\"</code> 6. Push your branch and open a Pull Request (PR).</p>"},{"location":"22-contributing/#coding-guidelines","title":"\ud83d\udccf Coding Guidelines","text":"<ul> <li>Follow industry-standard Java and Flutter best practices.</li> <li>Include proper documentation and comments.</li> <li>Ensure tests cover new features or fixes.</li> </ul>"},{"location":"22-contributing/#testing","title":"\ud83e\uddea Testing","text":"<ul> <li>Run unit and integration tests before pushing.</li> <li>Add new tests for each new feature.</li> <li>Use mock data for API testing when possible.</li> </ul>"},{"location":"22-contributing/#commit-message-convention","title":"\ud83d\udcdd Commit Message Convention","text":"<ul> <li><code>feat</code>: New feature</li> <li><code>fix</code>: Bug fix</li> <li><code>refactor</code>: Code refactoring</li> <li><code>test</code>: Adding or updating tests</li> <li><code>docs</code>: Documentation changes</li> <li><code>chore</code>: Minor housekeeping</li> </ul>"},{"location":"22-contributing/#code-reviews","title":"\ud83d\udccb Code Reviews","text":"<ul> <li>All PRs must be reviewed before merging.</li> <li>Maintain clean diffs with clear intent.</li> <li>Be open to feedback and suggestions.</li> </ul>"},{"location":"22-contributing/#code-of-conduct","title":"\u2764\ufe0f Code of Conduct","text":"<p>Please read CODE_OF_CONDUCT.md before contributing.</p> <p>Thank you for helping make RiderX better!</p>"},{"location":"23-license/","title":"\ud83d\udcc4 License","text":"<p>RiderX is an open-source project licensed under the MIT License.</p>"},{"location":"23-license/#mit-license","title":"MIT License","text":"<pre><code>\nMIT License\n\nCopyright (c) 2025 RiderX\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n</code></pre> <p>For any questions regarding licensing or enterprise use, contact: legal@riderx.app</p>"},{"location":"24-contact-and-team/","title":"\ud83d\udcc7 Contact &amp; Team","text":"<p>Get in touch with the creators of RiderX or reach out to individual team members for specific concerns.</p>"},{"location":"24-contact-and-team/#founding-team","title":"\ud83e\uddd1\u200d\ud83d\udcbc Founding Team","text":"Name Role Email LinkedIn Vineet Mishra Founder &amp; Product Lead vineet.mishra@rider.com Aman Lalpuria CTO aman.sharma163@gmail.com LinkedIn"},{"location":"24-contact-and-team/#business-partnerships","title":"\ud83e\udd1d Business &amp; Partnerships","text":"<p>For investor queries, partnerships, and business development opportunities:</p> <p>\ud83d\udce7 partners@riderx.app \ud83d\udce7 invest@riderx.app</p>"},{"location":"24-contact-and-team/#technical-support","title":"\ud83d\udee0\ufe0f Technical Support","text":"<ul> <li>Developers: dev@riderx.app</li> <li>Backend Ops: infra@riderx.app</li> <li>Security Team: security@riderx.app</li> </ul>"},{"location":"24-contact-and-team/#careers","title":"\ud83e\uddd1\u200d\ud83c\udf93 Careers","text":"<p>We're hiring across engineering, design, marketing, and operations!</p> <p>\ud83d\udce7 careers@riderx.app \ud83c\udf10 riderx.app/careers (coming soon)</p>"},{"location":"24-contact-and-team/#general-contact","title":"\ud83d\udcec General Contact","text":"<p>\ud83d\udce7 contact@riderx.app \ud83c\udf10 www.riderx.app</p> <p>Thank you for supporting RiderX \u2014 the future of urban mobility.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"\ud83e\udded Our Pledge","text":"<p>We as contributors and maintainers pledge to make participation in the RiderX project a respectful, harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We are committed to building a welcoming, safe, and inclusive community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"\ud83d\ude4b Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>\ud83d\udde3\ufe0f Using welcoming and inclusive language</li> <li>\ud83d\ude4c Being respectful of differing viewpoints and experiences</li> <li>\u2705 Gracefully accepting constructive feedback</li> <li>\ud83c\udf89 Focusing on what is best for the community</li> <li>\ud83e\udd1d Showing empathy toward other community members</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>\u274c The use of sexualized language or imagery, and unwelcome sexual attention or advances</li> <li>\u274c Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>\u274c Public or private harassment</li> <li>\u274c Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>\u274c Other conduct which could reasonably be considered inappropriate</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"\ud83d\udc6e Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"\ud83e\uddfe Scope","text":"<p>This Code of Conduct applies within all project spaces \u2014 GitHub issues, pull requests, discussions, Discord/Slack, and any public communication \u2014 as well as in public spaces when an individual is representing the project or community.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"\ud83d\udea8 Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting:</p> <p>\ud83d\udce7 conduct@riderx.app (example email)</p> <p>All complaints will be reviewed and investigated, and will result in a response that is deemed necessary and appropriate to the circumstances.</p> <p>We are committed to maintaining confidentiality to the extent possible.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"\ud83d\udcc4 Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html</p> <p>Thank you for helping make RiderX a welcoming and inclusive space for all contributors.</p>"}]}